'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _toPairs = require('lodash/toPairs');

var _toPairs2 = _interopRequireDefault(_toPairs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var playlistMap = {
  10: '1v1',
  11: '2v2',
  12: '3v3s',
  13: '3v3'
};

/* extract ranks from api stats object */
var formatRanks = function formatRanks(ranks) {
  var formattedRanks = {};
  (0, _toPairs2.default)(ranks).forEach(function (rank) {
    var playlist = playlistMap[rank[0]];
    var values = rank[1];
    formattedRanks[playlist] = parseInt(values.rating, 10);
    formattedRanks[playlist + '_games_played'] = parseInt(values.matches_played, 10);
    formattedRanks[playlist + '_division'] = parseInt(values.division, 10);
    formattedRanks[playlist + '_tier'] = parseInt(values.tier_id, 10);
  });
  return formattedRanks;
};

var createRequest = function createRequest(apiUrl, apiKey, platform, id) {
  var query = {
    api_key: apiKey,
    platform: platform + 1, // rltracker conversion
    id: id
  };
  return { url: apiUrl, query: query };
};

var handleResponse = function handleResponse(res) {
  if (res.status >= 400) {
    if (res.status === 404) {
      return Promise.reject({ data: res, message: 'PlayerNotFound' });
    }
    if (res.status === 524) {
      return Promise.reject({ data: res, message: 'TimeoutError' });
    }
    return Promise.reject({ data: res, message: 'UnknownError' });
  }
  return res.json().then(function (data) {
    return data;
  })
  // TODO: study possible rltracker errors
  .catch(function (err) {
    return { data: err, message: 'UnknownError' };
  });
};

var formatPlayerResponse = function formatPlayerResponse(data) {
  return {
    player: _extends({
      id: data.player.player_id,
      platform: parseInt(data.player.platform_id, 10) - 1,
      name: data.player.nickname
    }, formatRanks(data.ranking))
  };
};

exports.default = { createRequest: createRequest, handleResponse: handleResponse, formatPlayerResponse: formatPlayerResponse };