'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var playlistMap = {
  'Ranked Duel 1v1': '1v1',
  'Ranked Doubles 2v2': '2v2',
  'Ranked Solo Standard 3v3': '3v3s',
  'Ranked Standard 3v3': '3v3'
};

var tierMap = {
  'Grand Champion': 15,
  'Super Champion': 14,
  Champion: 13,
  Superstar: 12,
  'All-Star': 11,
  'Shooting Star': 10,
  'Rising Star': 9,
  'Challenger Elite': 8,
  'Challenger III': 7,
  'Challenger II': 6,
  'Challenger I': 5,
  'Prospect Elite': 4,
  'Prospect III': 3,
  'Prospect II': 2,
  'Prospect I': 1,
  Unranked: 0
};

var divisionMap = {
  V: 5,
  IV: 4,
  III: 3,
  II: 2,
  I: 1
};

/* extract ranks from api stats object */
var formatRanks = function formatRanks(stats) {
  return stats.filter(function (stat) {
    return playlistMap[stat.label];
  }) // get only valid playlists
  .map(function (stat) {
    var _ref;

    var playlistName = playlistMap[stat.label];
    var rank = parseInt(stat.value, 10);
    /* extract division and tier. Example:
      in: '[I] Grand Champion'
      out: ['I', 'Grand Champion']
    */

    var _$exec = /\[(\w{1,3})\]\s(.*)/.exec(stat.subLabel),
        _$exec2 = _slicedToArray(_$exec, 3),
        division = _$exec2[1],
        tier = _$exec2[2];

    return _ref = {}, _defineProperty(_ref, playlistName, rank), _defineProperty(_ref, playlistName + '_division', divisionMap[division]), _defineProperty(_ref, playlistName + '_tier', tierMap[tier]), _ref;
  })
  // merge all ranks into one object
  .reduce(function (accumulator, current) {
    return _extends({}, accumulator, current);
  }, {});
};

var createRequest = function createRequest(apiUrl, apiKey, platform, id) {
  var query = {
    platform: 3 - platform,
    name: id
  };

  var headers = { 'X-API-KEY': apiKey };
  return { url: apiUrl, query: query, headers: headers };
};

var handleResponse = function handleResponse(res) {
  return new Promise(function (resolve, reject) {
    res.text().then(function (data) {
      if (data === 'Bad Request') return reject({ message: 'InputError' });
      try {
        var jsonData = JSON.parse(data);
        resolve(jsonData);
      } catch (e) {
        reject({ data: data, message: 'UnknownError' });
      }
    }).catch(function (err) {
      return reject({ data: err, message: 'UnknownError' });
    });
  });
};

var formatPlayerResponse = function formatPlayerResponse(data) {
  return {
    player: _extends({
      id: data.platformUserId,
      platform: 3 - parseInt(data.platformId, 10),
      name: data.platformUserHandle
    }, formatRanks(data.stats))
  };
};

exports.default = { createRequest: createRequest, handleResponse: handleResponse, formatPlayerResponse: formatPlayerResponse };