{"version":3,"sources":["../src/external-actions.js"],"names":["getInformation","source","apiUrl","apiKey","platform","id","request","createRequest","url","stringify","query","options","headers","Promise","resolve","reject","then","res","status","response","message","statusText","json","err","jsonData","formatResponse","catch"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEO,IAAMA,0CAAiB,SAAjBA,cAAiB,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCC,EAAnC,EAA0C;AACtE,MAAMC,UAAUL,OAAOM,aAAP,CAAqBL,MAArB,EAA6BC,MAA7B,EAAqCC,QAArC,EAA+CC,EAA/C,CAAhB;AACA,MAAMG,MAASF,QAAQE,GAAjB,SAAwB,sBAAYC,SAAZ,CAAsBH,QAAQI,KAA9B,CAA9B;AACA,MAAMC,UAAU,EAAhB;AACA,MAAIL,QAAQM,OAAZ,EAAqBD,QAAQC,OAAR,GAAkBN,QAAQM,OAA1B;AACrB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,mCAAMP,GAAN,EAAWG,OAAX,EACGK,IADH,CACQ,UAACC,GAAD,EAAS;AACb,UAAIA,IAAIC,MAAJ,IAAc,GAAlB,EAAuB;AACrB,eAAOH,OAAO,EAAEI,UAAUF,GAAZ,EAAiBG,SAASH,IAAII,UAA9B,EAAP,CAAP;AACD;AACD,UAAI;AACFP,gBAAQG,IAAIK,IAAJ,EAAR;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZR,eAAO,EAAEI,UAAUF,GAAZ,EAAiBG,SAASH,IAAII,UAA9B,EAAP;AACD;AACF,KAVH,EAWGL,IAXH,CAWQ,UAACQ,QAAD;AAAA,aAAcvB,OAAOwB,cAAP,CAAsBD,QAAtB,CAAd;AAAA,KAXR,EAWuDE,KAXvD,CAW6D,UAACH,GAAD,EAAS;AAAER,aAAO,EAAEQ,QAAF,EAAOH,SAAS,eAAhB,EAAP;AAA4C,KAXpH;AAYD,GAbM,CAAP;AAcD,CAnBM","file":"external-actions.js","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport queryString from 'querystring';\n\nexport const getInformation = (source, apiUrl, apiKey, platform, id) => {\n  const request = source.createRequest(apiUrl, apiKey, platform, id);\n  const url = `${request.url}?${queryString.stringify(request.query)}`;\n  const options = {};\n  if (request.headers) options.headers = request.headers;\n  return new Promise((resolve, reject) => {\n    fetch(url, options)\n      .then((res) => {\n        if (res.status >= 400) {\n          return reject({ response: res, message: res.statusText });\n        }\n        try {\n          resolve(res.json());\n        } catch (err) {\n          reject({ response: res, message: res.statusText });\n        }\n      })\n      .then((jsonData) => source.formatResponse(jsonData)).catch((err) => { reject({ err, message: 'Unknown Error' }); });\n  });\n};\n"]}