'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TRACKER = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _trackers;

var _requests = require('./requests');

var _rocketLeagueTrackerNetwork = require('./trackers/rocket-league-tracker-network');

var _rocketLeagueTrackerNetwork2 = _interopRequireDefault(_rocketLeagueTrackerNetwork);

var _rltrackerPro = require('./trackers/rltracker-pro');

var _rltrackerPro2 = _interopRequireDefault(_rltrackerPro);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TRACKER = exports.TRACKER = {
  ROCKETLEAGUE_TRACKER_NETWORK: 'Rocket League Tracker Network',
  RLTRACKER_PRO: 'rltracker.pro'
};

var defaultOptions = {
  tracker: TRACKER.RLTRACKER_PRO,
  apiUrl: 'http://rltracker.pro/api/profile/get'
};

var trackers = (_trackers = {}, _defineProperty(_trackers, TRACKER.ROCKETLEAGUE_TRACKER_NETWORK, _rocketLeagueTrackerNetwork2.default), _defineProperty(_trackers, TRACKER.RLTRACKER_PRO, _rltrackerPro2.default), _trackers);

exports.default = function (options) {
  if (!options || !options.apiKey) {
    throw new Error('You must provide an apiKey');
  }

  var _defaultOptions$optio = _extends({}, defaultOptions, options),
      tracker = _defaultOptions$optio.tracker,
      apiUrl = _defaultOptions$optio.apiUrl,
      apiKey = _defaultOptions$optio.apiKey;

  if (!trackers[tracker]) {
    throw new Error('Invalid tracker: ' + tracker);
  }

  return function (platform, id) {
    return (0, _requests.getPlayerInformation)(trackers[tracker], apiUrl, apiKey, platform, id);
  };
};