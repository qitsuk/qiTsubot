{"version":3,"sources":["../../src/sources/rltracker-pro.js"],"names":["playlistMap","formatRanks","ranks","formattedRanks","forEach","rank","playlist","values","parseInt","rating","matches_played","division","tier_id","createRequest","apiUrl","apiKey","platform","id","query","api_key","url","formatResponse","data","info","ranking","name","player","nickname","player_id"],"mappings":";;;;;;AAAA;;;;;;AAGA,IAAMA,cAAc;AAClB,MAAI,KADc;AAElB,MAAI,KAFc;AAGlB,MAAI,MAHc;AAIlB,MAAI;AAJc,CAApB;;AAOA;AACA,IAAMC,cAAc,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,MAAMC,iBAAiB,EAAvB;AACA,yBAAQD,KAAR,EAAeE,OAAf,CAAuB,UAACC,IAAD,EAAU;AAC/B,QAAMC,WAAWN,YAAYK,KAAK,CAAL,CAAZ,CAAjB;AACA,QAAME,SAASF,KAAK,CAAL,CAAf;AACAF,mBAAeG,QAAf,IAA2BE,SAASD,OAAOE,MAAhB,EAAwB,EAAxB,CAA3B;AACAN,mBAAkBG,QAAlB,sBAA6CE,SAASD,OAAOG,cAAhB,EAAgC,EAAhC,CAA7C;AACAP,mBAAkBG,QAAlB,kBAAyCE,SAASD,OAAOI,QAAhB,EAA0B,EAA1B,CAAzC;AACAR,mBAAkBG,QAAlB,cAAqCE,SAASD,OAAOK,OAAhB,EAAyB,EAAzB,CAArC;AACD,GAPD;AAQA,SAAOT,cAAP;AACD,CAXD;;AAaA,IAAMU,gBAAgB,SAAhBA,aAAgB,CAACC,MAAD,EAASC,MAAT,EAAiBC,QAAjB,EAA2BC,EAA3B,EAAkC;AACtD,MAAMC,QAAQ;AACZC,aAASJ,MADG;AAEZC,cAAUA,WAAW,CAFT,EAEY;AACxBC;AAHY,GAAd;AAKA,SAAO,EAAEG,KAAKN,MAAP,EAAeI,YAAf,EAAP;AACD,CAPD;;AASA,IAAMG,iBAAiB,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AAC/B,MAAMC,OAAOtB,YAAYqB,KAAKE,OAAjB,CAAb;AACAD,OAAKE,IAAL,GAAYH,KAAKI,MAAL,CAAYC,QAAxB;AACAJ,OAAKN,EAAL,GAAUK,KAAKI,MAAL,CAAYE,SAAtB;AACA,SAAOL,IAAP;AACD,CALD;;kBAOe,EAAEV,4BAAF,EAAiBQ,8BAAjB,E","file":"rltracker-pro.js","sourcesContent":["import toPairs from 'lodash/toPairs';\n\n\nconst playlistMap = {\n  10: '1v1',\n  11: '2v2',\n  12: '3v3s',\n  13: '3v3',\n};\n\n/* extract ranks from api stats object */\nconst formatRanks = (ranks) => {\n  const formattedRanks = {};\n  toPairs(ranks).forEach((rank) => {\n    const playlist = playlistMap[rank[0]];\n    const values = rank[1];\n    formattedRanks[playlist] = parseInt(values.rating, 10);\n    formattedRanks[`${playlist}_games_played`] = parseInt(values.matches_played, 10);\n    formattedRanks[`${playlist}_division`] = parseInt(values.division, 10);\n    formattedRanks[`${playlist}_tier`] = parseInt(values.tier_id, 10);\n  });\n  return formattedRanks;\n};\n\nconst createRequest = (apiUrl, apiKey, platform, id) => {\n  const query = {\n    api_key: apiKey,\n    platform: platform + 1, // rltracker conversion\n    id,\n  };\n  return { url: apiUrl, query };\n};\n\nconst formatResponse = (data) => {\n  const info = formatRanks(data.ranking);\n  info.name = data.player.nickname;\n  info.id = data.player.player_id;\n  return info;\n};\n\nexport default { createRequest, formatResponse };\n"]}