{"version":3,"sources":["../../src/sources/rocket-league-tracker-network.js"],"names":["playlistMap","rankMap","Champion","Superstar","Unranked","divisionMap","V","IV","III","II","I","getRanksFromInformation","stats","ranks","forEach","stat","playlist","label","parseInt","value","regex","matched","exec","subLabel","createRequest","apiUrl","apiKey","platform","id","query","name","headers","url","formatResponse","data","info","platformUserHandle","platformUserId"],"mappings":";;;;;AAAA,IAAMA,cAAc;AAClB,qBAAmB,KADD;AAElB,wBAAsB,KAFJ;AAGlB,8BAA4B,MAHV;AAIlB,yBAAuB;AAJL,CAApB;;AAOA,IAAMC,UAAU;AACd,oBAAkB,EADJ;AAEd,oBAAkB,EAFJ;AAGdC,YAAU,EAHI;AAIdC,aAAW,EAJG;AAKd,cAAY,EALE;AAMd,mBAAiB,EANH;AAOd,iBAAe,CAPD;AAQd,sBAAoB,CARN;AASd,oBAAkB,CATJ;AAUd,mBAAiB,CAVH;AAWd,kBAAgB,CAXF;AAYd,oBAAkB,CAZJ;AAad,kBAAgB,CAbF;AAcd,iBAAe,CAdD;AAed,gBAAc,CAfA;AAgBdC,YAAU;AAhBI,CAAhB;;AAmBA,IAAMC,cAAc;AAClBC,KAAG,CADe;AAElBC,MAAI,CAFc;AAGlBC,OAAK,CAHa;AAIlBC,MAAI,CAJc;AAKlBC,KAAG;AALe,CAApB;;AAQA;AACA,IAAMC,0BAA0B,SAA1BA,uBAA0B,CAACC,KAAD,EAAW;AACzC,MAAMC,QAAQ,EAAd;AACAD,QAAME,OAAN,CAAc,UAACC,IAAD,EAAU;AACtB,QAAMC,WAAWhB,YAAYe,KAAKE,KAAjB,CAAjB;;AAEA,QAAID,QAAJ,EAAc;AACZH,YAAMG,QAAN,IAAkBE,SAASH,KAAKI,KAAd,EAAqB,EAArB,IAA2B,CAA7C;AACA;AACA,UAAMC,QAAQ,qBAAd;AACA,UAAMC,UAAUD,MAAME,IAAN,CAAWP,KAAKQ,QAAhB,CAAhB;AACAV,YAASG,QAAT,kBAAgCE,SAASb,YAAYgB,QAAQ,CAAR,CAAZ,CAAT,EAAkC,EAAlC,CAAhC;AACAR,YAASG,QAAT,cAA4BE,SAASjB,QAAQoB,QAAQ,CAAR,CAAR,CAAT,EAA8B,EAA9B,CAA5B;AACD;AACF,GAXD;AAYA,SAAOR,KAAP;AACD,CAfD;;AAiBA,IAAMW,gBAAgB,SAAhBA,aAAgB,CAACC,MAAD,EAASC,MAAT,EAAiBC,QAAjB,EAA2BC,EAA3B,EAAkC;AACtD,MAAMC,QAAQ;AACZF,cAAU,IAAIA,QADF;AAEZG,UAAMF;AAFM,GAAd;AAIA,MAAMG,UAAU,CAAC,EAAE,aAAaL,MAAf,EAAD,CAAhB;AACA,SAAO,EAAEM,KAAKP,MAAP,EAAeI,YAAf,EAAsBE,gBAAtB,EAAP;AACD,CAPD;;AASA,IAAME,iBAAiB,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AAC/B,MAAMC,OAAOxB,wBAAwBuB,KAAKtB,KAA7B,CAAb;AACAuB,OAAKL,IAAL,GAAYI,KAAKE,kBAAjB;AACAD,OAAKP,EAAL,GAAUM,KAAKG,cAAf;AACA,SAAOF,IAAP;AACD,CALD;;kBAOe,EAAEX,4BAAF,EAAiBS,8BAAjB,E","file":"rocket-league-tracker-network.js","sourcesContent":["const playlistMap = {\n  'Ranked Duel 1v1': '1v1',\n  'Ranked Doubles 2v2': '2v2',\n  'Ranked Solo Standard 3v3': '3v3s',\n  'Ranked Standard 3v3': '3v3',\n};\n\nconst rankMap = {\n  'Grand Champion': 15,\n  'Super Champion': 14,\n  Champion: 13,\n  Superstar: 12,\n  'All-Star': 11,\n  'Shooting Star': 10,\n  'Rising Star': 9,\n  'Challenger Elite': 8,\n  'Challenger III': 7,\n  'Challenger II': 6,\n  'Challenger I': 5,\n  'Prospect Elite': 4,\n  'Prospect III': 3,\n  'Prospect II': 2,\n  'Prospect I': 1,\n  Unranked: 0,\n};\n\nconst divisionMap = {\n  V: 5,\n  IV: 4,\n  III: 3,\n  II: 2,\n  I: 1,\n};\n\n/* extract ranks from api stats object */\nconst getRanksFromInformation = (stats) => {\n  const ranks = {};\n  stats.forEach((stat) => {\n    const playlist = playlistMap[stat.label];\n\n    if (playlist) {\n      ranks[playlist] = parseInt(stat.value, 10) + 1;\n      // extract division and rank\n      const regex = /\\[(\\w{1,3})\\]\\s(.*)/;\n      const matched = regex.exec(stat.subLabel);\n      ranks[`${playlist}_division`] = parseInt(divisionMap[matched[1]], 10);\n      ranks[`${playlist}_tier`] = parseInt(rankMap[matched[2]], 10);\n    }\n  });\n  return ranks;\n};\n\nconst createRequest = (apiUrl, apiKey, platform, id) => {\n  const query = {\n    platform: 3 - platform,\n    name: id,\n  };\n  const headers = [{ 'X-API-KEY': apiKey }];\n  return { url: apiUrl, query, headers };\n};\n\nconst formatResponse = (data) => {\n  const info = getRanksFromInformation(data.stats);\n  info.name = data.platformUserHandle;\n  info.id = data.platformUserId;\n  return info;\n};\n\nexport default { createRequest, formatResponse };\n"]}